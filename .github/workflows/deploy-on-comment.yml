name: Deploy Lambda on PR Comment

on:
  issue_comment:
    types: [created]

jobs:
  check-comment:
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/deploy')
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      environment: ${{ steps.check.outputs.environment }}
      
    steps:
    - name: Check comment and extract environment
      id: check
      run: |
        COMMENT="${{ github.event.comment.body }}"
        echo "Comment received: $COMMENT"
        
        # Check if user has permission (optional - you can customize this)
        # For now, we'll allow repository contributors
        
        # Parse the command
        if [[ "$COMMENT" == "/deploy ue1" ]]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "environment=us-east-1" >> $GITHUB_OUTPUT
          echo "Deploying to US East 1"
        elif [[ "$COMMENT" == "/deploy aps1" ]]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "environment=ap-south-1" >> $GITHUB_OUTPUT
          echo "Deploying to AP South 1"
        elif [[ "$COMMENT" == "/deploy uw2" ]]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "environment=us-west-2" >> $GITHUB_OUTPUT
          echo "Deploying to US West 2"
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          echo "Invalid deploy command"
        fi
    
    - name: Add reaction to comment
      if: steps.check.outputs.should-deploy == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.reactions.createForIssueComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: context.payload.comment.id,
            content: 'rocket'
          })
    
    - name: Add error reaction
      if: steps.check.outputs.should-deploy != 'true' && startsWith(github.event.comment.body, '/deploy')
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.reactions.createForIssueComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: context.payload.comment.id,
            content: 'confused'
          })

  deploy:
    needs: check-comment
    if: needs.check-comment.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Get PR branch
      uses: actions/github-script@v6
      id: get-pr
      with:
        script: |
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          return pr.data;
    
    - name: Checkout PR branch
      uses: actions/checkout@v3
      with:
        ref: ${{ fromJson(steps.get-pr.outputs.result).head.ref }}
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ needs.check-comment.outputs.environment }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Get Lambda function name
      id: lambda-name
      run: |
        # You can customize this based on your naming convention
        REPO_NAME="${{ github.event.repository.name }}"
        FUNCTION_NAME="${REPO_NAME}-lambda"
        echo "function-name=$FUNCTION_NAME" >> $GITHUB_OUTPUT
        echo "Deploying to function: $FUNCTION_NAME"
    
    - name: Check if Lambda exists
      id: check-lambda
      run: |
        if aws lambda get-function --function-name ${{ steps.lambda-name.outputs.function-name }} 2>/dev/null; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Lambda function exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Lambda function does not exist"
        fi
    
    - name: Create Lambda function if not exists
      if: steps.check-lambda.outputs.exists == 'false'
      run: |
        # Create initial Lambda function
        cd src
        zip -r ../initial-function.zip .
        cd ..
        
        aws lambda create-function \
          --function-name ${{ steps.lambda-name.outputs.function-name }} \
          --runtime nodejs18.x \
          --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lambda-execution-role \
          --handler index.handler \
          --zip-file fileb://initial-function.zip \
          --timeout 30 \
          --memory-size 256
    
    - name: Install dependencies
      run: |
        if [ -d "src" ]; then
          cd src
          npm init -y
          npm install --production
        else
          echo "No src directory found, skipping npm install"
        fi
    
    - name: Create deployment package
      run: |
        if [ -d "src" ]; then
          cd src
          zip -r ../function.zip .
        else
          # If no src folder, zip everything except .git
          zip -r function.zip . -x ".git/*" ".github/*" "*.md"
        fi
    
    - name: Deploy to Lambda
      run: |
        aws lambda update-function-code \
          --function-name ${{ steps.lambda-name.outputs.function-name }} \
          --zip-file fileb://function.zip \
          --publish
    
    - name: Wait for update
      run: |
        aws lambda wait function-updated \
          --function-name ${{ steps.lambda-name.outputs.function-name }}
    
    - name: Test Lambda
      id: test-lambda
      run: |
        aws lambda invoke \
          --function-name ${{ steps.lambda-name.outputs.function-name }} \
          --payload '{"test": "Deployment from PR #${{ github.event.issue.number }}"}' \
          response.json
        
        echo "Lambda response:"
        cat response.json
    
    - name: Comment on PR with result
      uses: actions/github-script@v6
      with:
        script: |
          const environment = '${{ needs.check-comment.outputs.environment }}';
          const functionName = '${{ steps.lambda-name.outputs.function-name }}';
          const prNumber = context.issue.number;
          
          const comment = `✅ **Deployment Successful!**
          
          - **Environment:** \`${environment}\`
          - **Function:** \`${functionName}\`
          - **PR:** #${prNumber}
          - **Triggered by:** @${context.payload.comment.user.login}
          - **Time:** ${new Date().toISOString()}
          
          Lambda function has been updated and tested successfully.`;
          
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: comment
          });
    
    - name: Comment on PR with error
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const environment = '${{ needs.check-comment.outputs.environment }}';
          const prNumber = context.issue.number;
          
          const comment = `❌ **Deployment Failed**
          
          - **Environment:** \`${environment}\`
          - **PR:** #${prNumber}
          - **Triggered by:** @${context.payload.comment.user.login}
          
          Please check the [Actions log](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`;
          
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: comment
          });